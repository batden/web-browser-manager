#!/usr/bin/python3

# This file is part of Feren OS Web Browser Manager.
#
# Feren OS Web Browser Manager is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Feren OS Web Browser Manager is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Feren OS Web Browser Manager.  If not, see <http://www.gnu.org/licenses/>.

#(c) Feren Team 2015-2020 <ferenosdev@outlook.com> 
#(c) AZorin 2010-2015 <azorin@zoringroup.com>
#(c) Zorink 2010 <zorink@zoringroup.com>
#
# Easily install and uninstall web browsers in Feren OS.
# This is free software made available under the GNU public license.

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
#from gi.repository import GLib, Gio
#from PyQt5 import QtGui, QtCore, QtWidgets
#from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox, QLabel, QMainWindow, QProgressBar
#from PyQt5.QtCore import pyqtSlot, Qt
#from PyQt5.QtGui import QIcon, QPixmap
import requests
import os
from os import path
import sys
from threading import Thread
import time

#QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling, True)

os.chdir('/tmp/')

applogo = "/usr/share/pixmaps/browser-manager.svg"

class BrowserManagerManager():    
  def __init__(self, browsername, option, bmself):
    try:
        os.system("/usr/share/browser-manager/"+browsername+"/"+option)
    except:
        Gtk.MessageDialog(BrowserManager, 0, Gtk.MessageType.CRITICAL, Gtk.ButtonsType.OK, "Web Browser Manager", "An error occured while initiating the package management process.")
        #QMessageBox.critical(BrowserManager, "Web Browser Manager", "An error occured while initiating the package management process.")
    BrowserManager.finish_process(bmself)

class BrowserManager(Gtk.Window):
#class BrowserManager(QMainWindow):
    
    def __init__(self):
        # super(BrowserManager, self).__init__()

        # self.set_title("Web Browser Manager")
        # self.set_size_request(815, 440)
        # self.set_resizable(False)
        # self.set_icon_from_file(applogo)

        # self.set_position(Gtk.WindowPosition.CENTER)
        # self.connect("destroy",self.do_destroy)
        # fixed = Gtk.Fixed()

        super().__init__()
        
        self.title = "Web Browser Manager"
        self.width = 815
        self.height = 440
        self.browserwork = False
        
        self.connect("delete-event", self.on_close)
        
        self.set_default_size(self.width, self.height)
        self.set_resizable(False)
        
        self.initUI()
    
    def on_close(self, widget, event):
        if self.browserwork:
            return True
        else:
            Gtk.main_quit()

    def initUI(self):
        self.set_title(self.title)
        self.move(10, 10)
        self.set_size_request(self.width, self.height)

#####################
# Adding the buttons#
#####################

#        global uninstfirefox
#        global uninstchrome
#        global uninstopera
#        global uninstweb
#        global uninstvivaldi
#        global uninstchromium
#        global instfirefox
#        global instchrome
#        global instopera
#        global instweb
#        global instvivaldi
#        global instchromium
        global imgfx
        global imgcr
        global imgvi
        global imgch
        global imgop
        global imgbr
        global imgfa
        global imagemse
        global imagewf

        is_64bits = sys.maxsize > 2**32
    
        #Vivaldi
        # if os.path.isfile("/usr/bin/vivaldi"):
            # uninstvivaldi = Gtk.Button.new_with_label("Uninstall")
            # uninstvivaldi.connect("clicked", self.on_uninstvivaldi)
            # uninstvivaldi.set_size_request(87, 30)
            # fixed.put(uninstvivaldi, 30, 130)
            # uninstvivaldi.set_tooltip_text("Uninstall Vivaldi")
        # else:
            # instvivaldi = Gtk.Button.new_with_label("Install")
            # instvivaldi.connect("clicked", self.on_instvivaldi)
            # instvivaldi.set_size_request(87, 30)
            # fixed.put(instvivaldi, 30, 130)
            # instvivaldi.set_tooltip_text("Install Vivaldi")

        self.uninstvivaldi = Gtk.Button.new_with_label("Uninstall")      
        self.uninstvivaldi.connect("clicked", self.on_uninstvivaldi)
        self.uninstvivaldi.set_size_request(87, 30)
        self.uninstvivaldi.set_tooltip_text("Uninstall Vivaldi")
        
        self.instvivaldi = Gtk.Button("Install", self)          
        self.instvivaldi.connect("clicked", self.on_instvivaldi)
        self.instvivaldi.set_size_request(87, 30)
        self.instvivaldi.set_tooltip_text("Install Vivaldi")

        #Google Chrome
        # if os.path.isfile("/usr/bin/chrome"):
            # uninstchrome = Gtk.Button.new_with_label("Uninstall")
            # uninstchrome.connect("clicked", self.on_uninstchrome)
            # uninstchrome.set_size_request(87, 30)
            # fixed.put(uninstchrome, 30, 130)
            # uninstchrome.set_tooltip_text("Uninstall Chrome")
        # else:
            # instchrome = Gtk.Button.new_with_label("Install")
            # instchrome.connect("clicked", self.on_instchrome)
            # instchrome.set_size_request(87, 30)
            # fixed.put(instchrome, 30, 130)
            # instchrome.set_tooltip_text("Install Chrome")
            
        self.uninstchrome = Gtk.Button.new_with_label("Uninstall")      
        self.uninstchrome.connect("clicked", self.on_uninstchrome)
        self.uninstchrome.set_size_request(87, 30)
        self.uninstchrome.set_tooltip_text("Uninstall Chrome")
        
        self.instchrome = Gtk.Button("Install", self)          
        self.instchrome.connect("clicked", self.on_instchrome)
        self.instchrome.set_size_request(87, 30)
        self.instchrome.set_tooltip_text("Install Chrome")

    
        #Chromium
        # if os.path.isfile("/usr/bin/chromium"):
            # uninstchromium = Gtk.Button.new_with_label("Uninstall")
            # uninstchromium.connect("clicked", self.on_uninstchromium)
            # uninstchromium.set_size_request(87, 30)
            # fixed.put(uninstchromium, 30, 130)
            # uninstchromium.set_tooltip_text("Uninstall Chromium")
        # else:
            # instchromium = Gtk.Button.new_with_label("Install")
            # instchromium.connect("clicked", self.on_instchromium)
            # instchromium.set_size_request(87, 30)
            # fixed.put(instchromium, 30, 130)
            # instchromium.set_tooltip_text("Install Chromium")
            
        self.uninstchromium = Gtk.Button.new_with_label("Uninstall")      
        self.uninstchromium.connect("clicked", self.on_uninstchromium)
        self.uninstchromium.set_size_request(87, 30)
        self.uninstchromium.set_tooltip_text("Uninstall Chromium")
        
        self.instchromium = Gtk.Button("Install", self)          
        self.instchromium.connect("clicked", self.on_instchromium)
        self.instchromium.set_size_request(87, 30)
        self.instchromium.set_tooltip_text("Install Chromium")
        
        #Microsoft Edge
        # if os.path.isfile("/usr/bin/msedge"):
            # uninstmsedge = Gtk.Button.new_with_label("Uninstall")
            # uninstmsedge.connect("clicked", self.on_uninstmsedge)
            # uninstmsedge.set_size_request(87, 30)
            # fixed.put(uninstmsedge, 30, 130)
            # uninstmsedge.set_tooltip_text("Uninstall MS Edge")
        # else:
            # instmsedge = Gtk.Button.new_with_label("Install")
            # instmsedge.connect("clicked", self.on_instmsedge)
            # instmsedge.set_size_request(87, 30)
            # fixed.put(instmsedge, 30, 130)
            # instmsedge.set_tooltip_text("Install MS Edge")
            
        self.uninstmsedge = Gtk.Button.new_with_label("Uninstall")      
        self.uninstmsedge.connect("clicked", self.on_uninstmsedge)
        self.uninstmsedge.set_size_request(87, 30)
        self.uninstmsedge.set_tooltip_text("Uninstall Microsoft Edge")
        
        self.instmsedge = Gtk.Button("Install", self)          
        self.instmsedge.connect("clicked", self.on_instmsedge)
        self.instmsedge.set_size_request(87, 30)
        self.instmsedge.set_tooltip_text("Install Microsoft Edge")

        #Mozilla Firefox
        # if os.path.isfile("/usr/bin/firefox"):
            # uninstfirefox = Gtk.Button.new_with_label("Uninstall")
            # uninstfirefox.connect("clicked", self.on_uninstfirefox)
            # uninstfirefox.set_size_request(87, 30)
            # fixed.put(uninstfirefox, 30, 130)
            # uninstfirefox.set_tooltip_text("Uninstall Firefox")
        # else:
            # instfirefox = Gtk.Button.new_with_label("Install")
            # instfirefox.connect("clicked", self.on_instfirefox)
            # instfirefox.set_size_request(87, 30)
            # fixed.put(instfirefox, 30, 130)
            # instfirefox.set_tooltip_text("Install Firefox")
            
        self.uninstfirefox = Gtk.Button.new_with_label("Uninstall")      
        self.uninstfirefox.connect("clicked", self.on_uninstfirefox)
        self.uninstfirefox.set_size_request(87, 30)
        self.uninstfirefox.set_tooltip_text("Uninstall Firefox")
        
        self.instfirefox = Gtk.Button("Install", self)          
        self.instfirefox.connect("clicked", self.on_instfirefox)
        self.instfirefox.set_size_request(87, 30)
        self.instfirefox.set_tooltip_text("Install Firefox")
        
        #Brave
        # if os.path.isfile("/usr/bin/brave"):
            # uninstbrave = Gtk.Button.new_with_label("Uninstall")
            # uninstbrave.connect("clicked", self.on_uninstbrave)
            # uninstbrave.set_size_request(87, 30)
            # fixed.put(uninstbrave, 30, 130)
            # uninstbrave.set_tooltip_text("Uninstall Brave")
        # else:
            # instbrave = Gtk.Button.new_with_label("Install")
            # instbrave.connect("clicked", self.on_instbrave)
            # instbrave.set_size_request(87, 30)
            # fixed.put(instbrave, 30, 130)
            # instbrave.set_tooltip_text("Install Brave")
            
        self.uninstbrave = Gtk.Button.new_with_label("Uninstall")      
        self.uninstbrave.connect("clicked", self.on_uninstbrave)
        self.uninstbrave.set_size_request(87, 30)
        self.uninstbrave.set_tooltip_text("Uninstall Brave")
        
        self.instbrave = Gtk.Button("Install", self)          
        self.instbrave.connect("clicked", self.on_instbrave)
        self.instbrave.set_size_request(87, 30)
        self.instbrave.set_tooltip_text("Install Brave")

        #Opera
        # if os.path.isfile("/usr/bin/opera"):
            # uninstopera = Gtk.Button.new_with_label("Uninstall")
            # uninstopera.connect("clicked", self.on_uninstopera)
            # uninstvivaldi.set_size_request(87, 30)
            # fixed.put(uninstvivaldi, 30, 130)
            # uninstvivaldi.set_tooltip_text("Uninstall Vivaldi")
        # else:
            # instvivaldi = Gtk.Button.new_with_label("Install")
            # instvivaldi.connect("clicked", self.on_instvivaldi)
            # instvivaldi.set_size_request(87, 30)
            # fixed.put(instvivaldi, 30, 130)
            # instvivaldi.set_tooltip_text("Install Firefox")
            
        self.uninstopera = Gtk.Button.new_with_label("Uninstall")      
        self.uninstopera.connect("clicked", self.on_uninstopera)
        self.uninstopera.set_size_request(87, 30)
        self.uninstopera.set_tooltip_text("Uninstall Opera")
        
        self.instopera = Gtk.Button("Install", self)          
        self.instopera.connect("clicked", self.on_instopera)
        self.instopera.set_size_request(87, 30)
        self.instopera.set_tooltip_text("Install Opera")

        #Waterfox
        # if os.path.isfile("/usr/bin/vivaldi"):
            # uninstvivaldi = Gtk.Button.new_with_label("Uninstall")
            # uninstvivaldi.connect("clicked", self.on_uninstvivaldi)
            # uninstvivaldi.set_size_request(87, 30)
            # fixed.put(uninstvivaldi, 30, 130)
            # uninstvivaldi.set_tooltip_text("Uninstall Vivaldi")
        # else:
            # instvivaldi = Gtk.Button.new_with_label("Install")
            # instvivaldi.connect("clicked", self.on_instvivaldi)
            # instvivaldi.set_size_request(87, 30)
            # fixed.put(instvivaldi, 30, 130)
            # instvivaldi.set_tooltip_text("Install Firefox")
            
        self.uninstwaterfox = Gtk.Button.new_with_label("Uninstall")      
        self.uninstwaterfox.connect("clicked", self.on_uninstwaterfox)
        self.uninstwaterfox.set_size_request(87, 30)
        self.uninstwaterfox.set_tooltip_text("Uninstall Waterfox")
        
        self.instwaterfox = Gtk.Button("Install", self)          
        self.instwaterfox.connect("clicked", self.on_instwaterfox)
        self.instwaterfox.set_size_request(87, 30)
        self.instwaterfox.set_tooltip_text("Install Waterfox")

        #Falkon
        # if os.path.isfile("/usr/bin/vivaldi"):
            # uninstvivaldi = Gtk.Button.new_with_label("Uninstall")
            # uninstvivaldi.connect("clicked", self.on_uninstvivaldi)
            # uninstvivaldi.set_size_request(87, 30)
            # fixed.put(uninstvivaldi, 30, 130)
            # uninstvivaldi.set_tooltip_text("Uninstall Vivaldi")
        # else:
            # instvivaldi = Gtk.Button.new_with_label("Install")
            # instvivaldi.connect("clicked", self.on_instvivaldi)
            # instvivaldi.set_size_request(87, 30)
            # fixed.put(instvivaldi, 30, 130)
            # instvivaldi.set_tooltip_text("Install Firefox")
            
        self.uninstfalkon = Gtk.Button.new_with_label("Uninstall")      
        self.uninstfalkon.connect("clicked", self.on_uninstfalkon)
        self.uninstfalkon.set_size_request(87, 30)
        self.uninstfalkon.set_tooltip_text("Uninstall Falkon")
        
        self.instfalkon = Gtk.Button("Install", self)          
        self.instfalkon.connect("clicked", self.on_instfalkon)
        self.instfalkon.set_size_request(87, 30)
        self.instfalkon.set_tooltip_text("Install Falkon")

        #GNOME Web
        # if os.path.isfile("/usr/bin/vivaldi"):
            # uninstvivaldi = Gtk.Button.new_with_label("Uninstall")
            # uninstvivaldi.connect("clicked", self.on_uninstvivaldi)
            # uninstvivaldi.set_size_request(87, 30)
            # fixed.put(uninstvivaldi, 30, 130)
            # uninstvivaldi.set_tooltip_text("Uninstall Vivaldi")
        # else:
            # instvivaldi = Gtk.Button.new_with_label("Install")
            # instvivaldi.connect("clicked", self.on_instvivaldi)
            # instvivaldi.set_size_request(87, 30)
            # fixed.put(instvivaldi, 30, 130)
            # instvivaldi.set_tooltip_text("Install Firefox")
            
        self.uninstweb = Gtk.Button.new_with_label("Uninstall")      
        self.uninstweb.connect("clicked", self.on_uninstweb)
        self.uninstweb.set_size_request(87, 30)
        self.uninstweb.set_tooltip_text("Uninstall Epiphany")
        
        self.instweb = Gtk.Button("Install", self)          
        self.instweb.connect("clicked", self.on_instweb)
        self.instweb.set_size_request(87, 30)
        self.instweb.set_tooltip_text("Install Epiphany")

		#General Window buttons
        self.closebtn = Gtk.Button("Close", self)  
        self.closebtn.connect("clicked", self.on_close)
        self.closebtn.set_size_request(85, 30)
        self.closebtn.set_tooltip_text("Close Window")

        self.aboutbtn = Gtk.Button("About", self)  
        self.aboutbtn.connect("clicked", self.on_aboutbm)
        self.aboutbtn.set_size_request(85, 30)
        self.aboutbtn.set_tooltip_text("About Browser Manager")
       
        self.progressbar1 = Gtk.ProgressBar()
        self.progressbar1.set_size_request(85, 28)
        self.progressbar1.set_fraction(0)
        self.progressbar1.set_visible(False)
        
############################
# Adding the program titles#
############################
       
        self.firefoxlabel = Gtk.Label()
        self.chromelabel = Gtk.Label()
        self.weblabel = Gtk.Label()
        self.vivaldilabel = Gtk.Label()   
        self.chromiumlabel = Gtk.Label() 
        self.operalabel = Gtk.Label() 
        self.bravelabel = Gtk.Label() 
        self.msedgelabel = Gtk.Label()
        self.waterfoxlabel = Gtk.Label()
        self.falkonlabel = Gtk.Label()
        
        #Set the text and font for the labels
        self.firefoxlabel.set_markup("<b>Mozilla Firefox</b>")
        self.chromelabel.set_markup("<b>Google Chrome</b>")
        self.weblabel.set_markup("<b>GNOME Web</b>")        
        self.vivaldilabel.set_markup("<b>Vivaldi</b>")        
        self.chromiumlabel.set_markup("<b>Chromium</b>")        
        self.operalabel.set_markup("<b>Opera</b>")        
        self.bravelabel.set_markup("<b>Brave</b>")        
        self.msedgelabel.set_markup("<b>Microsoft Edge</b>")        
        self.waterfoxlabel.set_markup("<b>Waterfox</b>")        
        self.falkonlabel.set_markup("<b>Falkon</b>")
        
        grid = Gtk.Grid()
        
        labelwidth = firefoxlabel.get_layout().get_pixel_size()[0]
        firefoxlabel.set.halign(Gtk.Align.END)
        firefoxlabel.set.valign(Gtk.Align.END)
        firefoxlabel.set_size_request(labelwidth, -1)
        grid.attach(firefoxlabel, 0, 0, 1, 1)
        
        labelwidth = chromelabel.get_layout().get_pixel_size()[0]
        chromelabel.set.halign(Gtk.Align.END)
        chromelabel.set.valign(Gtk.Align.END)
        chromelabel.set_size_request(labelwidth, -1)
        grid.attach(chromelabel, 1, 0, 1, 1)

        labelwidth = weblabel.get_layout().get_pixel_size()[0]
        weblabel.set.halign(Gtk.Align.END)
        weblabel.set.valign(Gtk.Align.END)
        weblabel.set_size_request(labelwidth, -1)
        grid.attach(weblabel, 2, 0, 1, 1)

        labelwidth = vivaldilabel.get_layout().get_pixel_size()[0]
        vivaldilabel.set.halign(Gtk.Align.END)
        vivaldilabel.set.valign(Gtk.Align.END)
        vivaldilabel.set_size_request(labelwidth, -1)
        grid.attach(vivaldilabel, 3, 0, 1, 1)

        labelwidth = chromiumlabel.get_layout().get_pixel_size()[0]
        chromiumlabel.set.halign(Gtk.Align.END)
        chromiumlabel.set.valign(Gtk.Align.END)
        chromiumlabel.set_size_request(labelwidth, -1)
        grid.attach(chromiumlabel, 4, 0, 1, 1)

        labelwidth = operalabel.get_layout().get_pixel_size()[0]
        operalabel.set.halign(Gtk.Align.END)
        operalabel.set.valign(Gtk.Align.END)
        operalabel.set_size_request(labelwidth, -1)
        grid.attach(operalabel, 5, 0, 1, 1)

        labelwidth = bravelabel.get_layout().get_pixel_size()[0]
        bravelabel.set.halign(Gtk.Align.END)
        bravelabel.set.valign(Gtk.Align.END)
        bravelabel.set_size_request(labelwidth, -1)
        grid.attach(bravelabel, 1, 0, 1, 1)

        labelwidth = msedgelabel.get_layout().get_pixel_size()[0]
        msedgelabel.set.halign(Gtk.Align.END)
        msedgelabel.set.valign(Gtk.Align.END)
        msedgelabel.set_size_request(labelwidth, -1)
        grid.attach(msedgelabel, 1, 1, 1, 1)

        labelwidth = waterfoxlabel.get_layout().get_pixel_size()[0]
        waterfoxlabel.set.halign(Gtk.Align.END)
        waterfoxlabel.set.valign(Gtk.Align.END)
        waterfoxlabel.set_size_request(labelwidth, -1)
        grid.attach(waterfoxlabel, 1, 2, 1, 1)

        labelwidth = falkonlabel.get_layout().get_pixel_size()[0]
        falkonlabel.set.halign(Gtk.Align.END)
        falkonlabel.set.valign(Gtk.Align.END)
        falkonlabel.set_size_request(labelwidth, -1)
        grid.attach(falkonlabel, 1, 3, 1, 1)
        
        
                      
        # # labelwidth = vivaldilabel.fontMetrics().boundingRect(vivaldilabel.text()).width()
        # # vivaldilabel.move(int(35 + 37.5 - (0.5 * labelwidth)), int(10))
        # # vivaldilabel.setFixedWidth(labelwidth)
        # # vivaldilabel.setAlignment(Qt.AlignCenter)
        
        # labelwidth = chromelabel.fontMetrics().boundingRect(chromelabel.text()).width()
        # chromelabel.move(int(200 + 37.5 - (0.5 * labelwidth)), int(10))
        # chromelabel.setFixedWidth(labelwidth)
        # chromelabel.setAlignment(Qt.AlignCenter)
        
        # labelwidth = chromiumlabel.fontMetrics().boundingRect(chromiumlabel.text()).width()
        # chromiumlabel.move(int(365 + 37.5 - (0.5 * labelwidth)), int(10))
        # chromiumlabel.setFixedWidth(labelwidth)
        # chromiumlabel.setAlignment(Qt.AlignCenter)
        
        # labelwidth = msedgelabel.fontMetrics().boundingRect(msedgelabel.text()).width()
        # msedgelabel.move(int(530 + 37.5 - (0.5 * labelwidth)), int(10))
        # msedgelabel.setFixedWidth(labelwidth)
        # msedgelabel.setAlignment(Qt.AlignCenter)

        # labelwidth = firefoxlabel.fontMetrics().boundingRect(firefoxlabel.text()).width()
        # firefoxlabel.move(int(695 + 37.5 - (0.5 * labelwidth)), int(10))
        # firefoxlabel.setFixedWidth(labelwidth)
        # firefoxlabel.setAlignment(Qt.AlignCenter)
        
        # labelwidth = bravelabel.fontMetrics().boundingRect(bravelabel.text()).width()
        # bravelabel.move(int(35 + 37.5 - (0.5 * labelwidth)), int(190))
        # bravelabel.setFixedWidth(labelwidth)
        # bravelabel.setAlignment(Qt.AlignCenter)
        
        # labelwidth = operalabel.fontMetrics().boundingRect(operalabel.text()).width()
        # operalabel.move(int(200 + 37.5 - (0.5 * labelwidth)), int(190))
        # operalabel.setFixedWidth(labelwidth)
        # operalabel.setAlignment(Qt.AlignCenter)
        
        # labelwidth = waterfoxlabel.fontMetrics().boundingRect(waterfoxlabel.text()).width()
        # waterfoxlabel.move(int(365 + 37.5 - (0.5 * labelwidth)), int(190))
        # waterfoxlabel.setFixedWidth(labelwidth)
        # waterfoxlabel.setAlignment(Qt.AlignCenter)
        
        # labelwidth = falkonlabel.fontMetrics().boundingRect(falkonlabel.text()).width()
        # falkonlabel.move(int(530 + 37.5 - (0.5 * labelwidth)), int(190))
        # falkonlabel.setFixedWidth(labelwidth)
        # falkonlabel.setAlignment(Qt.AlignCenter)
        
        # labelwidth = weblabel.fontMetrics().boundingRect(weblabel.text()).width()
        # weblabel.move(int(695 + 37.5 - (0.5 * labelwidth)), int(190))
        # weblabel.setFixedWidth(labelwidth)
        # weblabel.setAlignment(Qt.AlignCenter)

###################
# Adding the logos#
###################

        
        if os.path.exists('/tmp/firefox-logo.png'):
            imgfx = '/tmp/firefox-logo.png'
        else:
            imgfx = '/usr/share/icons/Inspire/96/apps/internet-web-browser.png'

        if os.path.exists('/tmp/google-chrome-logo.png'):
            imgcr = '/tmp/google-chrome-logo.png'
        else:
            imgcr = '/usr/share/icons/Inspire/96/apps/internet-web-browser.png'

        imgwe = "/usr/share/browser-manager/web/icon.png"

        if os.path.exists('/tmp/vivaldi-logo.png'):
            imgvi = '/tmp/vivaldi-logo.png'
        else:
            imgvi = '/usr/share/icons/Inspire/96/apps/internet-web-browser.png'

        if os.path.exists('/tmp/chromium-logo.png'):
            imgch = '/tmp/chromium-logo.png'
        else:
            imgch = '/usr/share/icons/Inspire/96/apps/internet-web-browser.png'

        if os.path.exists('/tmp/opera-logo.png'):
            imgop = '/tmp/opera-logo.png'
        else:
            imgop = '/usr/share/icons/Inspire/96/apps/internet-web-browser.png'

        if os.path.exists('/tmp/brave-logo.png'):
            imgbr = '/tmp/brave-logo.png'
        else:
            imgbr = '/usr/share/icons/Inspire/96/apps/internet-web-browser.png'

        if os.path.exists('/tmp/falkon-logo.png'):
            imgfa = '/tmp/falkon-logo.png'
        else:
            imgfa = '/usr/share/icons/Inspire/96/apps/internet-web-browser.png'

        if os.path.exists('/tmp/waterfox-logo.png'):
            imgwf = '/tmp/waterfox-logo.png'
        else:
            imgwf = '/usr/share/icons/Inspire/96/apps/internet-web-browser.png'

        if os.path.exists('/tmp/microsoft-edge-logo.png'):
            imgmse = '/tmp/microsoft-edge-logo.png'
        else:
            imgmse = '/usr/share/icons/Inspire/96/apps/internet-web-browser.png'

        self.aboutvivaldi = QPushButton('', self)
        self.aboutvivaldi.setIcon(QtGui.QIcon(imgvi))
        self.aboutvivaldi.setIconSize(QtCore.QSize(65,65))
        self.aboutvivaldi.clicked.connect(self.on_aboutvivaldi)
        self.aboutvivaldi.setFixedSize(75, 75)

        self.aboutvivaldi.move(int(35), int(35))

        self.aboutvivaldi.setToolTip("About Vivaldi")

        self.aboutchrome = QPushButton('', self)
        self.aboutchrome.setIcon(QtGui.QIcon(imgcr))
        self.aboutchrome.setIconSize(QtCore.QSize(65,65))
        self.aboutchrome.clicked.connect(self.on_aboutchrome)
        self.aboutchrome.setFixedSize(75, 75)

        self.aboutchrome.move(int(200), int(35))

        self.aboutchrome.setToolTip("About Google Chrome")

        self.aboutchromium = QPushButton('', self)
        self.aboutchromium.setIcon(QtGui.QIcon(imgch))
        self.aboutchromium.setIconSize(QtCore.QSize(65,65))
        self.aboutchromium.clicked.connect(self.on_aboutchromium)
        self.aboutchromium.setFixedSize(75, 75)

        self.aboutchromium.move(int(365), int(35))

        self.aboutchromium.setToolTip("About Chromium")

        self.aboutmsedge = QPushButton('', self)
        self.aboutmsedge.setIcon(QtGui.QIcon(imgmse))
        self.aboutmsedge.setIconSize(QtCore.QSize(65,65))
        self.aboutmsedge.clicked.connect(self.on_aboutmsedge)
        self.aboutmsedge.setFixedSize(75, 75)

        self.aboutmsedge.move(int(530), int(35))

        self.aboutmsedge.setToolTip("About Microsoft Edge")

        self.aboutfirefox = QPushButton('', self)
        self.aboutfirefox.clicked.connect(self.on_aboutfirefox)
        self.aboutfirefox.setIcon(QtGui.QIcon(imgfx))
        self.aboutfirefox.setIconSize(QtCore.QSize(65, 65))
        self.aboutfirefox.setFixedSize(75, 75)

        self.aboutfirefox.move(int(695), int(35))

        self.aboutfirefox.setToolTip("About Firefox")

        self.aboutbrave = QPushButton('', self)
        self.aboutbrave.setIcon(QtGui.QIcon(imgbr))
        self.aboutbrave.setIconSize(QtCore.QSize(65,65))
        self.aboutbrave.clicked.connect(self.on_aboutbrave)
        self.aboutbrave.setFixedSize(75, 75)

        self.aboutbrave.move(int(35), int(220))

        self.aboutbrave.setToolTip("About Brave")

        self.aboutopera = QPushButton('', self)
        self.aboutopera.setIcon(QtGui.QIcon(imgop))
        self.aboutopera.setIconSize(QtCore.QSize(65,65))
        self.aboutopera.clicked.connect(self.on_aboutopera)
        self.aboutopera.setFixedSize(75, 75)

        self.aboutopera.move(int(200), int(220))

        self.aboutopera.setToolTip("About Opera")

        self.aboutwaterfox = QPushButton('', self)
        self.aboutwaterfox.setIcon(QtGui.QIcon(imgwf))
        self.aboutwaterfox.setIconSize(QtCore.QSize(65,65))
        self.aboutwaterfox.clicked.connect(self.on_aboutwaterfox)
        self.aboutwaterfox.setFixedSize(75, 75)

        self.aboutwaterfox.move(int(365), int(220))

        self.aboutwaterfox.setToolTip("About Waterfox")

        self.aboutfalkon = QPushButton('', self)
        self.aboutfalkon.setIcon(QtGui.QIcon(imgfa))
        self.aboutfalkon.setIconSize(QtCore.QSize(65,65))
        self.aboutfalkon.clicked.connect(self.on_aboutfalkon)
        self.aboutfalkon.setFixedSize(75, 75)

        self.aboutfalkon.move(int(530), int(220))

        self.aboutfalkon.setToolTip("About Falkon")
        
        self.aboutweb = QPushButton('', self)
        self.aboutweb.setIcon(QtGui.QIcon(imgwe))
        self.aboutweb.setIconSize(QtCore.QSize(65,65))
        self.aboutweb.clicked.connect(self.on_aboutweb)
        self.aboutweb.setFixedSize(75, 75)

        self.aboutweb.move(int(695), int(220))

        self.aboutweb.setToolTip("About Web")

        self.on_refresh()
        self.show()

##############################        
# Defining the button actions#
##############################

    def finish_process(self):
        #self.instfirefox.setEnabled(True)
        #self.instchrome.setEnabled(True)
        #self.instweb.setEnabled(True)
        #self.instvivaldi.setEnabled(True)
        #self.instchromium.setEnabled(True)
        #self.instopera.setEnabled(True)
        #self.instbrave.setEnabled(True)
        #self.instfalkon.setEnabled(True)
        #self.instmsedge.setEnabled(True)
        #self.instwaterfox.setEnabled(True)
        #self.uninstfirefox.setEnabled(True)
        #self.uninstchrome.setEnabled(True)
        #self.uninstweb.setEnabled(True)
        #self.uninstvivaldi.setEnabled(True)
        #self.uninstchromium.setEnabled(True)
        #self.uninstopera.setEnabled(True)
        #self.uninstbrave.setEnabled(True)
        #self.uninstfalkon.setEnabled(True)
        #self.uninstmsedge.setEnabled(True)
        #self.uninstwaterfox.setEnabled(True)
        self.closebtn.setVisible(True)
        self.browserwork = False
        self.on_refresh()
        self.progressbar1.setVisible(False)
        self.progressbar1.move(int(10), int(405))
        #is_64bits = sys.maxsize > 2**32
        #if is_64bits == False:
            #self.instbrave.setEnabled(False)
            #self.instopera.setEnabled(False)
            #self.instchrome.setEnabled(False)
            #self.instwaterfox.setEnabled(False)
        
    def begin_process(self):
        self.instfirefox.setVisible(False)
        self.instchrome.setVisible(False)
        self.instweb.setVisible(False)
        self.instvivaldi.setVisible(False)
        self.instchromium.setVisible(False)
        self.instopera.setVisible(False)
        self.instbrave.setVisible(False)
        self.instfalkon.setVisible(False)
        self.instmsedge.setVisible(False)
        self.instmsedge.setVisible(False)
        self.instwaterfox.setVisible(False)
        self.uninstfirefox.setVisible(False)
        self.uninstchrome.setVisible(False)
        self.uninstweb.setVisible(False)
        self.uninstvivaldi.setVisible(False)
        self.uninstchromium.setVisible(False)
        self.uninstopera.setVisible(False)
        self.uninstbrave.setVisible(False)
        self.uninstfalkon.setVisible(False)
        self.uninstmsedge.setVisible(False)
        self.uninstwaterfox.setVisible(False)
        self.closebtn.setVisible(False)
        self.browserwork = True
        self.progressbar1.setVisible(True)
  
    def on_refresh(self):
        if os.path.isdir("/var/lib/flatpak/app/org.mozilla.firefox") or os.path.isfile("/usr/bin/firefox"):
            self.instfirefox.setVisible(False)
            self.uninstfirefox.setVisible(True)
        else:
            self.uninstfirefox.setVisible(False)
            self.instfirefox.setVisible(True)

        if os.path.isfile("/usr/bin/google-chrome"):
            self.instchrome.setVisible(False)
            self.uninstchrome.setVisible(True)
        else:
            self.uninstchrome.setVisible(False)
            self.instchrome.setVisible(True)

        if os.path.isfile("/usr/bin/epiphany-browser"):
            self.instweb.setVisible(False)
            self.uninstweb.setVisible(True)
        else:
            self.uninstweb.setVisible(False)
            self.instweb.setVisible(True)

        if os.path.isfile("/usr/bin/vivaldi"):
            self.instvivaldi.setVisible(False)
            self.uninstvivaldi.setVisible(True)
        else:
            self.uninstvivaldi.setVisible(False)
            self.instvivaldi.setVisible(True)

        if os.path.isfile("/usr/bin/chromium"):
            self.instchromium.setVisible(False)
            self.uninstchromium.setVisible(True)
        else:
            self.uninstchromium.setVisible(False)
            self.instchromium.setVisible(True)

        if os.path.isfile("/usr/bin/opera"):
            self.instopera.setVisible(False)
            self.uninstopera.setVisible(True)
        else:
            self.uninstopera.setVisible(False)
            self.instopera.setVisible(True)

        if os.path.isfile("/usr/bin/brave-browser"):
            self.instbrave.setVisible(False)
            self.uninstbrave.setVisible(True)
        else:
            self.uninstbrave.setVisible(False)
            self.instbrave.setVisible(True)
    
        if os.path.isfile("/usr/bin/falkon"):
            self.instfalkon.setVisible(False)
            self.uninstfalkon.setVisible(True)
        else:
            self.uninstfalkon.setVisible(False)
            self.instfalkon.setVisible(True)
    
        if os.path.isfile("/usr/bin/microsoft-edge"):
            self.instmsedge.setVisible(False)
            self.uninstmsedge.setVisible(True)
            ##Secret...
            self.instmsedge.setVisible(False)
        else:
            self.uninstmsedge.setVisible(False)
            self.instmsedge.setVisible(True)
            ##Secret...
            self.instmsedge.setVisible(True)
            self.instmsedge.setDefault(True)
            self.instmsedge.setFocus()
        self.instmsedge.setEnabled(False)
    
        if os.path.isfile("/usr/bin/waterfox-current"):
            self.instwaterfox.setVisible(False)
            self.uninstwaterfox.setVisible(True)
        else:
            self.uninstwaterfox.setVisible(False)
            self.instwaterfox.setVisible(True)

    def on_instvivaldi(self, widget):                                 
        self.begin_process()
        self.progressbar1.move(int(11), int(131))
        t = Thread(
            target=BrowserManagerManager,
            args=("vivaldi", "install", self)
        )
        t.start()

    def on_instchrome(self, widget): 
        self.begin_process()
        self.progressbar1.move(int(176), int(131))
        t = Thread(
            target=BrowserManagerManager,
            args=("chrome", "install", self)
        )
        t.start()

    def on_instchromium(self, widget):                               
        self.begin_process()
        self.progressbar1.move(int(341), int(131))
        t = Thread(
            target=BrowserManagerManager,
            args=("chromium", "install", self)
        )
        t.start()

    def on_instmsedge(self, widget):                                 
        self.begin_process()
        self.progressbar1.move(int(506), int(131))
        t = Thread(
            target=BrowserManagerManager,
            args=("msedge", "install", self)
        )
        t.start()

    def on_instfirefox(self, widget):
        self.begin_process()
        self.progressbar1.move(int(671), int(131))
        t = Thread(
            target=BrowserManagerManager,
            args=("firefox", "install", self)
        )
        t.start()

    def on_instbrave(self, widget):                              
        self.begin_process()
        self.progressbar1.move(int(11), int(316))
        t = Thread(
            target=BrowserManagerManager,
            args=("brave", "install", self)
        )
        t.start()

    def on_instopera(self, widget): 
        self.begin_process()
        self.progressbar1.move(int(176), int(316))
        t = Thread(
            target=BrowserManagerManager,
            args=("opera", "install", self)
        )
        t.start()

    def on_instwaterfox(self, widget):                                 
        self.begin_process()
        self.progressbar1.move(int(341), int(316))
        t = Thread(
            target=BrowserManagerManager,
            args=("waterfox", "install", self)
        )
        t.start()

    def on_instfalkon(self, widget):                                 
        self.begin_process()
        self.progressbar1.move(int(506), int(316))
        t = Thread(
            target=BrowserManagerManager,
            args=("falkon", "install", self)
        )
        t.start()
    
    def on_instweb(self, widget):                                    
        self.begin_process()
        self.progressbar1.move(int(671), int(316))
        t = Thread(
            target=BrowserManagerManager,
            args=("web", "install", self)
        )
        t.start()

    def on_uninstvivaldi(self, widget):                               
        self.begin_process()
        self.progressbar1.move(int(11), int(131))
        t = Thread(
            target=BrowserManagerManager,
            args=("vivaldi", "uninstall", self)
        )
        t.start()

    def on_uninstchrome(self, widget):                                   
        self.begin_process()
        self.progressbar1.move(int(176), int(131))
        t = Thread(
            target=BrowserManagerManager,
            args=("chrome", "uninstall", self)
        )
        t.start()
    
    def on_uninstchromium(self, widget):                                 
        self.begin_process()
        self.progressbar1.move(int(341), int(131))
        t = Thread(
            target=BrowserManagerManager,
            args=("chromium", "uninstall", self)
        )
        t.start()

    def on_uninstmsedge(self, widget):                               
        self.begin_process()
        self.progressbar1.move(int(506), int(131))
        t = Thread(
            target=BrowserManagerManager,
            args=("msedge", "uninstall", self)
        )
        t.start()

    def on_uninstfirefox(self, widget):                              
        self.begin_process()
        self.progressbar1.move(int(671), int(131))
        t = Thread(
            target=BrowserManagerManager,
            args=("firefox", "uninstall", self)
        )
        t.start()

    def on_uninstbrave(self, widget):                                
        self.begin_process()
        self.progressbar1.move(int(11), int(316))
        t = Thread(
            target=BrowserManagerManager,
            args=("brave", "uninstall", self)
        )
        t.start()

    def on_uninstopera(self, widget):                                
        self.begin_process()
        self.progressbar1.move(int(176), int(316))
        t = Thread(
            target=BrowserManagerManager,
            args=("opera", "uninstall", self)
        )
        t.start()

    def on_uninstwaterfox(self, widget):                               
        self.begin_process()
        self.progressbar1.move(int(341), int(316))
        t = Thread(
            target=BrowserManagerManager,
            args=("waterfox", "uninstall", self)
        )
        t.start()

    def on_uninstfalkon(self, widget):                               
        self.begin_process()
        self.progressbar1.move(int(506), int(316))
        t = Thread(
            target=BrowserManagerManager,
            args=("falkon", "uninstall", self)
        )
        t.start()
    
    def on_uninstweb(self, widget):                                  
        self.begin_process()
        self.progressbar1.move(int(671), int(316))
        t = Thread(
            target=BrowserManagerManager,
            args=("web", "uninstall", self)
        )
        t.start()

    def on_aboutvivaldi(self, widget):
            QMessageBox.information(self, " ", "Vivaldi is the defacto web browser in Feren OS, being developed by Vivaldi Technologies - a company founded by former Opera Software cofounder and CEO Jon Stephenson von Tetzchner. It is a browser that is simple by default but powerful when needed, with easily accessible features to greatly improve your browser workflow right out of the box. It also provides an optional advertisement and tracking blocker.\n\nBased on: Chromium\nMobile Version available: Yes\nExtra Repositories Added: Vivaldi's Official Package Repository")
            pass

    def on_aboutchrome(self, widget):
            QMessageBox.information(self, " ", "Google Chrome is an web browser project backed by Google that aims to build a safer, faster, and more stable way for all internet users to experience the web.\n\nBased on: Chromium\nMobile Version available: Yes\nExtra Repositories Added: Google Chrome's (Stable) Package Repository")

    def on_aboutchromium(self, widget):
            QMessageBox.information(self, " ", "Chromium is the open source father of Google Chrome, also being mainly made by Google. It shares a lot of the GUI that Google Chrome has, but with an alternative logo and some other features missing such as codecs being pre-installed, and so on.\n\nBased on: N/A\nMobile Version available: Yes\nExtra Repositories Added: Linux Mint (only required Chromium packages)")
            pass

    def on_aboutmsedge(self, widget):
            QMessageBox.information(self, " ", "Microsoft Edge is Microsoft's all-new release of the Microsoft Edge browser that was used in the latest version of their flagship Operating System. It shares a lot of similarities with the original Microsoft Edge. It also comes pre-bunded with the Bing search engine and a Start Page with Microsoft News integration.\n\nBased on: Chromium\nMobile Version available: Yes\nExtra Repositories Added: Microsoft Edge's Package Repository")
            pass

    def on_aboutfirefox(self, widget):
            QMessageBox.information(self, " ", "Firefox delivers safe and easy web browsing with a familiar user interface, thousands of plugins, and integrated search that lets you get the most out of the web.\n\nBased on: N/A\nMobile Version available: Yes\nExtra Repositories Added: Flathub (Flatpak)")

    def on_aboutbrave(self, widget):
            QMessageBox.information(self, " ", "Brave is yet another freeware browser based on the Chromium codebase, and Blink Engine. Brave is open-source, and is designed to block Ads and Website Trackers by default, with a Donate to Support Your Favourite Websites mindset.\n\nBased on: Chromium\nMobile Version available: Yes\nExtra Repositories Added: Brave Browser's Package Repository")
            pass

    def on_aboutopera(self, widget):
            QMessageBox.information(self, " ", "Opera is another freeware browser, being developed by Opera. The browser is built on the Blink Engine, and is designed to be feature rich, having built-in features such as an Ad Blocker, VPN, Battery Saver, and so on, all included with the browser.\n\nBased on: Chromium\nMobile Version available: Yes\nExtra Repositories Added: Opera Browser's Package Repository")
            pass

    def on_aboutwaterfox(self, widget):
            QMessageBox.information(self, " ", "Waterfox is a freeware browser based on Mozilla Firefox. This browser is built with a mix of privacy and customisability in mind. This browser has a big focus on stability and limiting data collection while staying true to the browser's base.\n\nBased on: Mozilla Firefox\nMobile Version available: No\nExtra Repositories Added: Unofficial Waterfox Package Repository")
            pass

    def on_aboutfalkon(self, widget):
            QMessageBox.information(self, " ", "Falkon is KDE's browser, which has a lot of Firefox's old design traits, a familiar look and feel, pre-built-in AdBlocker, and everything else you'd expect to see from a browser in the modern age. It's still a solid choice of browser, young as it may be.\n\nBased on: QtWebEngine\nMobile Version available: No\nExtra Repositories Added: None")
            pass

    def on_aboutweb(self, widget):
            QMessageBox.information(self, " ", "Web is the WebKit based web browser for GNOME. It offers a simple, clean, beautiful view of the Web. Its principles are simplicity and standards compliance.\n\nBased on: WebKitGTK\nMobile Version available: No*\nExtra Repositories Added: None\n\n* This web browser converts itself into a phone-friendly web browser on compatible phones")
            pass

    def on_aboutbm(self, widget):
            QMessageBox.information(self, "About Web Browser Manager", "Web Browser Manager is a utility for managing the web browsers that you have installed on your system. Choose from a variety of browsers with just a few clicks and find the browser that is right for you in no time.\n\nCopyright (GPLv3):\n- Feren OS Developer (2015-2020)\n- AZorin (2010-2015)\n- ZorinK (2010)\n\n\nWeb Browser Manager is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See Version 3 of the GNU General Public License for more details.")
            pass

    def on_close(self, event):
        self.close()

#app = QApplication(sys.argv)
ex = BrowserManager()
sys.exit(app.exec_())
