#!/usr/bin/python3

# This file is part of the Bodhi OS Web Browser Manager.
#
# Bodhi OS Web Browser Manager is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Bodhi OS Web Browser Manager is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Bodhi OS Web Browser Manager.  If not, see <http://www.gnu.org/licenses/>.

#(c) Feren Team 2015-2020 <ferenosdev@outlook.com> 
#(c) AZorin 2010-2015 <azorin@zoringroup.com>
#(c) Zorink 2010 <zorink@zoringroup.com>
#
# Easily install and uninstall web browsers on a GTK based system.
# This is free software made available under the GNU public license.

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, GdkPixbuf
import requests
import os
from os import path
import sys
from threading import Thread
import time

os.chdir('/tmp/')

applogo = "/usr/share/pixmaps/browser-manager.svg"

fixed = Gtk.Fixed()

class BrowserManagerManager():
    def __init__(self, browsername, option, bmself):
        try:
            os.system("/usr/share/browser-manager/"+browsername+"/"+option)
        except:
            Gtk.MessageDialog(BrowserManager, 0, Gtk.MessageType.CRITICAL, Gtk.ButtonType.OK, "Web Browser Manger", "An error occured while initiating the package management process.")
        BrowserManager.finish_process(bmself)

class BrowserManager(Gtk.Window):
    
    def __init__(self):
        
        super().__init__()
        
        self.title = "Web Browser Manager"
        self.width = 815
        self.height = 440
        self.browserwork = False
                 
        self.connect("delete-event", self.on_close)
        
        self.set_default_size(self.width, self.height)
        self.set_resizable(False)
        
        self.initUI()
        
    def on_close(self, widget, event):
        Gtk.main_quit()
        # if self.browserwork:
            # return True
        # else:
            # Gtk.main_quit()
             
    def initUI(self):
        self.set_title(self.title)
        self.move(10, 10)
        self.set_size_request(self.width, self.height)

#####################
# Adding the buttons#
#####################
        
        #Interface Main Buttons
        def int_button(label, position, callback, browser_name):
            button = Gtk.Button.new_with_label(label)
            button.connect("clicked", callback)
            button.set_size_request(87, 30)
            fixed.put(button, *position)
            button.set_tooltip_text("%s %s" % (label, browser_name))
            
            return button
            
        #Vivaldi
        self.uninstvivaldi = int_button("Uninstall", (30, 130), self.on_uninstvivaldi, "Vivaldi")
        self.instvivaldi = int_button("Install", (30, 130), self.on_instvivaldi, "Vivaldi")
        
        #Google Chrome
        self.uninstchrome = int_button("Uninstall", (195, 130), self.on_uninstchrome, "Chrome")
        self.instchrome = int_button("Install", (195, 130), self.on_instchrome, "Chrome")
        
        #Chromium
        self.uninstchromium = int_button("Uninstall", (360, 130), self.on_uninstchromium, "Chromium")
        self.instchromium = int_button("Install", (360, 130), self.on_instchromium, "Chromium")
        
        #MS Edge
        self.uninstmsedge = int_button("Uninstall", (525, 130), self.on_uninstmsedge, "Microsoft Edge")
        self.instmsedge = int_button("Install", (525, 130), self.on_instmsedge, "Microsoft Edge")
        
        #Firefox
        self.uninstfirefox = int_button("Uninstall", (690, 130), self.on_uninstfirefox, "Firefox")
        self.instfirefox = int_button("Install", (690, 130), self.on_instfirefox, "Firefox")
        
        #Brave
        self.uninstbrave = int_button("Uninstall", (30, 315), self.on_uninstbrave, "Brave")
        self.instbrave = int_button("Install", (30, 315), self.on_instbrave, "Brave")
        
        #Opera
        self.uninstopera = int_button("Uninstall", (195, 315), self.on_uninstopera, "Opera")
        self.instopera = int_button("Install", (195, 315), self.on_instopera, "Opera")
        
        #Waterfox
        self.uninstwaterfox = int_button("Uninstall", (360, 315), self.on_uninstwaterfox, "Falkon")
        self.instwaterfox = int_button("Install", (360, 315), self.on_instwaterfox, "Waterfox")
        
        #Falkon
        self.uninstfalkon = int_button("Uninstall", (525, 315), self.on_uninstfalkon, "Falkon")
        self.instfalkon = int_button("Install", (525, 315), self.on_instfalkon, "Falkon")
        
        #Epiphany
        self.uninstweb = int_button("Uninstall", (690, 315), self.on_uninstweb, "Epiphany")
        self.instweb = int_button("Install", (690, 315), self.on_instweb, "Epiphany")
            
        #General Window buttons
        self.closebtn = int_button("Close", (720, 400), self.on_close, "Window")
        self.aboutbtn = int_button("About", (10, 400), self.on_aboutbm, "Browser Manager")
       
        #Progress Bar
        self.progressbar1 = Gtk.ProgressBar()
        self.progressbar1.set_size_request(85, 28)
        self.progressbar1.set_fraction(0)
        self.progressbar1.set_visible(False)
        
        
        
############################
# Adding the program titles#
############################
        
        def create_label(label_text, label_x, label_y):
            #Create the label
            label = Gtk.Label()
            
            #Add text and set format
            label.set_markup("<b>%s</b>" % label_text)
            
            #Check size based on text, find center, resize and position label
            label_width, label_height = label.get_layout().get_pixel_size()
            label_h = label_x + 37.5 - (0.5 * label_width)
            label.set_size_request(label_width, label_height)
            fixed.put(label, label_h, label_y)
            
            return label
            
        vivaldilabel = create_label("Vivaldi", 35, 10)
        chromelabel = create_label("Google Chrome", 200, 10)
        chromiumlabel = create_label("Chromium", 365, 10)
        msedgelabel = create_label("Microsoft Edge", 530, 10)
        firefoxlabel = create_label("Mozilla Firefox", 695, 10)
        bravelabel = create_label("Brave", 35, 190)
        operalabel = create_label("Opera", 200, 190)
        waterfoxlabel = create_label("Waterfox", 365, 190)
        falkonlabel = create_label("Falkon", 530, 190)
        weblabel = create_label("GNOME Web", 695, 190)
            
###################
# Adding the logos#
###################

        imgfx = '/usr/share/browser-manager/firefox/Firefox_logo.png'
        imgcr = '/usr/share/browser-manager/chrome/Chrome_logo.png'
        imgvi = '/usr/share/browser-manager/vivaldi/Vivaldi_logo.png'
        imgch = '/usr/share/browser-manager/chromium/Chromium_logo.png'
        imgop = '/usr/share/browser-manager/opera/Opera_logo.png'
        imgbr = '/usr/share/browser-manager/brave/Brave_logo.png'
        imgwf = '/usr/share/browser-manager/waterfox/Waterfox_logo.png'
        imgwe = '/usr/share/browser-manager/web/Epiphany_logo.png'
        imgms = '/usr/share/browser-manager/msedge/Edge_logo.png'
        imgfa = '/usr/share/browser-manager/falkon/Falkon_logo.png'
        
        #Create basic button
        def about_button(icon_file, position, callback, tooltip):
            #Create a pixbuf object from the image file
            pixbuf = GdkPixbuf.Pixbuf.new_from_file(icon_file)
            
            #Resize the image
            resized_pixbuf = pixbuf.scale_simple(65, 65, GdkPixbuf.InterpType.BILINEAR)
            
            #Create gtk.Image from resized pixbuf
            image = Gtk.Image()
            image.set_from_pixbuf(resized_pixbuf)
            
            #Create button and set size, icon and position
            button = Gtk.Button()
            button.set_size_request(75, 75)
            button.add(image)
            fixed.put(button, *position)
            
            #Connect the click event to the callback
            button.connect("clicked", callback)
            
            #Add the tooltip
            button.set_tooltip_text(tooltip)
            
            return button
            
        #Icon buttons
        self.aboutvivaldi = about_button(imgvi, (35, 35), self.on_aboutvivaldi, "About Vivaldi")
        self.aboutchrome = about_button(imgcr, (200, 35), self.on_aboutchrome, "About Chrome")
        self.aboutchromium = about_button(imgch, (365, 35), self.on_aboutchromium, "About Chromium")
        self.aboutmsedge = about_button(imgms, (530, 35), self.on_aboutmsedge, "About Microsoft Edge")
        self.aboutfirefox = about_button(imgfx, (695, 35), self.on_aboutfirefox, "About Firefox")
        self.aboutbrave = about_button(imgbr, (35, 220), self.on_aboutbrave, "About Brave")
        self.aboutopera = about_button(imgop, (200, 220), self.on_aboutopera, "About Opera")
        self.aboutwaterfox = about_button(imgwf, (365, 220), self.on_aboutwaterfox, "About Waterfox")
        self.aboutfalkon = about_button(imgfa, (530, 220), self.on_aboutfalkon, "About Falkon")
        self.aboutweb = about_button(imgwe, (695, 220), self.on_aboutweb, "About Epiphany")
        
        self.add(fixed)
        self.show_all()
        self.on_refresh()

##############################        
# Defining the button actions#
##############################

    def finish_process(self):
        #self.instfirefox.setEnabled(True)
        #self.instchrome.setEnabled(True)
        #self.instweb.setEnabled(True)
        #self.instvivaldi.setEnabled(True)
        #self.instchromium.setEnabled(True)
        #self.instopera.setEnabled(True)
        #self.instbrave.setEnabled(True)
        #self.instfalkon.setEnabled(True)
        #self.instmsedge.setEnabled(True)
        #self.instwaterfox.setEnabled(True)
        #self.uninstfirefox.setEnabled(True)
        #self.uninstchrome.setEnabled(True)
        #self.uninstweb.setEnabled(True)
        #self.uninstvivaldi.setEnabled(True)
        #self.uninstchromium.setEnabled(True)
        #self.uninstopera.setEnabled(True)
        #self.uninstbrave.setEnabled(True)
        #self.uninstfalkon.setEnabled(True)
        #self.uninstmsedge.setEnabled(True)
        #self.uninstwaterfox.setEnabled(True)
        
        self.closebtn.set_sensitive(True)
        self.browserwork = False
        self.on_refresh()
        self.progressbar1.set_visible(False)
        fixed.put(self.progressbar1, 10, 405)
        
        # self.closebtn.setVisible(True)
        # self.browserwork = False
        # self.on_refresh()
        # self.progressbar1.setVisible(False)
        # self.progressbar1.move(int(10), int(405))
        
        #is_64bits = sys.maxsize > 2**32
        #if is_64bits == False:
            #self.instbrave.setEnabled(False)
            #self.instopera.setEnabled(False)
            #self.instchrome.setEnabled(False)
            #self.instwaterfox.setEnabled(False)
        
    def begin_process(self):
        self.instfirefox.set_visible(False)
        self.instchrome.set_visible(False)
        self.instweb.set_visible(False)
        self.instvivaldi.set_visible(False)
        self.instchromium.set_visible(False)
        self.instopera.set_visible(False)
        self.instbrave.set_visible(False)
        self.instfalkon.set_visible(False)
        self.instmsedge.set_visible(False)
        self.instmsedge.set_visible(False)
        self.instwaterfox.set_visible(False)
        self.uninstfirefox.set_visible(False)
        self.uninstchrome.set_visible(False)
        self.uninstweb.set_visible(False)
        self.uninstvivaldi.set_visible(False)
        self.uninstchromium.set_visible(False)
        self.uninstopera.set_visible(False)
        self.uninstbrave.set_visible(False)
        self.uninstfalkon.set_visible(False)
        self.uninstmsedge.set_visible(False)
        self.uninstwaterfox.set_visible(False)
        self.closebtn.set_visible(False)
        self.browserwork = True
        self.progressbar1.set_visible(True)
  
    def on_refresh(self):
        if os.path.isdir("/var/lib/flatpak/app/org.mozilla.firefox") or os.path.isfile("/usr/bin/firefox"):
            self.instfirefox.set_visible(False)
            self.uninstfirefox.set_visible(True)
        else:
            self.uninstfirefox.set_visible(False)
            self.instfirefox.set_visible(True)

        if os.path.isfile("/usr/bin/google-chrome"):
            self.instchrome.set_visible(False)
            self.uninstchrome.set_visible(True)
        else:
            self.uninstchrome.set_visible(False)
            self.instchrome.set_visible(True)

        if os.path.isfile("/usr/bin/epiphany-browser"):
            self.instweb.set_visible(False)
            self.uninstweb.set_visible(True)
        else:
            self.uninstweb.set_visible(False)
            self.instweb.set_visible(True)

        if os.path.isfile("/usr/bin/vivaldi"):
            self.instvivaldi.set_visible(False)
            self.uninstvivaldi.set_visible(True)
        else:
            self.uninstvivaldi.set_visible(False)
            self.instvivaldi.set_visible(True)

        if os.path.isfile("/usr/bin/chromium"):
            self.instchromium.set_visible(False)
            self.uninstchromium.set_visible(True)
        else:
            self.uninstchromium.set_visible(False)
            self.instchromium.set_visible(True)

        if os.path.isfile("/usr/bin/opera"):
            self.instopera.set_visible(False)
            self.uninstopera.set_visible(True)
        else:
            self.uninstopera.set_visible(False)
            self.instopera.set_visible(True)

        if os.path.isfile("/usr/bin/brave-browser"):
            self.instbrave.set_visible(False)
            self.uninstbrave.set_visible(True)
        else:
            self.uninstbrave.set_visible(False)
            self.instbrave.set_visible(True)
    
        if os.path.isfile("/usr/bin/falkon"):
            self.instfalkon.set_visible(False)
            self.uninstfalkon.set_visible(True)
        else:
            self.uninstfalkon.set_visible(False)
            self.instfalkon.set_visible(True)
    
        if os.path.isfile("/usr/bin/microsoft-edge"):
            self.instmsedge.set_visible(False)
            self.uninstmsedge.set_visible(True)
            ##Secret...
            self.instmsedge.set_visible(False)
        else:
            self.uninstmsedge.set_visible(False)
            self.instmsedge.set_visible(True)
            ##Secret...
            self.instmsedge.set_visible(True)
            self.instmsedge.set_always_show_image(True)
            self.instmsedge.grab_focus()
            self.instmsedge.set_sensitive(False)
    
        if os.path.isfile("/usr/bin/waterfox-current"):
            self.instwaterfox.set_visible(False)
            self.uninstwaterfox.set_visible(True)
        else:
            self.uninstwaterfox.set_visible(False)
            self.instwaterfox.set_visible(True)

    def on_instvivaldi(self, widget):                                 
        self.begin_process()
        fixed.put(self.progressbar1, 11, 131)
        t = Thread(
            target=BrowserManagerManager,
            args=("vivaldi", "install", self)
        )
        t.start()

    def on_instchrome(self, widget): 
        self.begin_process()
        fixed.put(self.progressbar1, 176, 131)
        t = Thread(
            target=BrowserManagerManager,
            args=("chrome", "install", self)
        )
        t.start()

    def on_instchromium(self, widget):                               
        self.begin_process()
        fixed.put(self.progressbar1, 341, 131)
        t = Thread(
            target=BrowserManagerManager,
            args=("chromium", "install", self)
        )
        t.start()

    def on_instmsedge(self, widget):                                 
        self.begin_process()
        fixed.put(self.progressbar1, 506, 131)
        t = Thread(
            target=BrowserManagerManager,
            args=("msedge", "install", self)
        )
        t.start()

    def on_instfirefox(self, widget):
        self.begin_process()
        fixed.put(self.progressbar1, 671, 131)
        t = Thread(
            target=BrowserManagerManager,
            args=("firefox", "install", self)
        )
        t.start()

    def on_instbrave(self, widget):                              
        self.begin_process()
        fixed.put(self.progressbar1, 11, 316)
        t = Thread(
            target=BrowserManagerManager,
            args=("brave", "install", self)
        )
        t.start()

    def on_instopera(self, widget): 
        self.begin_process()
        fixed.put(self.progressbar1, 176, 316)
        t = Thread(
            target=BrowserManagerManager,
            args=("opera", "install", self)
        )
        t.start()

    def on_instwaterfox(self, widget):                                 
        self.begin_process()
        fixed.put(self.progressbar1, 341, 316)
        t = Thread(
            target=BrowserManagerManager,
            args=("waterfox", "install", self)
        )
        t.start()

    def on_instfalkon(self, widget):                                 
        self.begin_process()
        fixed.put(self.progressbar1, 506, 316)
        t = Thread(
            target=BrowserManagerManager,
            args=("falkon", "install", self)
        )
        t.start()
    
    def on_instweb(self, widget):                                    
        self.begin_process()
        fixed.put(self.progressbar1, 671, 316)
        t = Thread(
            target=BrowserManagerManager,
            args=("web", "install", self)
        )
        t.start()

    def on_uninstvivaldi(self, widget):                               
        self.begin_process()
        fixed.put(self.progressbar1, 11, 131)
        t = Thread(
            target=BrowserManagerManager,
            args=("vivaldi", "uninstall", self)
        )
        t.start()

    def on_uninstchrome(self, widget):                                   
        self.begin_process()
        fixed.put(self.progressbar1, 176, 131)
        t = Thread(
            target=BrowserManagerManager,
            args=("chrome", "uninstall", self)
        )
        t.start()
    
    def on_uninstchromium(self, widget):                                 
        self.begin_process()
        fixed.put(self.progressbar1, 341, 131)
        t = Thread(
            target=BrowserManagerManager,
            args=("chromium", "uninstall", self)
        )
        t.start()

    def on_uninstmsedge(self, widget):                               
        self.begin_process()
        fixed.put(self.progressbar1, 506, 131)
        t = Thread(
            target=BrowserManagerManager,
            args=("msedge", "uninstall", self)
        )
        t.start()

    def on_uninstfirefox(self, widget):                              
        self.begin_process()
        fixed.put(self.progressbar1, 671, 131)
        t = Thread(
            target=BrowserManagerManager,
            args=("firefox", "uninstall", self)
        )
        t.start()

    def on_uninstbrave(self, widget):                                
        self.begin_process()
        fixed.put(self.progressbar1, 11 , 316)
        t = Thread(
            target=BrowserManagerManager,
            args=("brave", "uninstall", self)
        )
        t.start()

    def on_uninstopera(self, widget):                                
        self.begin_process()
        fixed.put(self.progressbar1, 176, 316) 
        t = Thread(
            target=BrowserManagerManager,
            args=("opera", "uninstall", self)
        )
        t.start()

    def on_uninstwaterfox(self, widget):                               
        self.begin_process()
        fixed.put(self.progressbar1, 341, 316)
        t = Thread(
            target=BrowserManagerManager,
            args=("waterfox", "uninstall", self)
        )
        t.start()

    def on_uninstfalkon(self, widget):                               
        self.begin_process()
        fixed.put(self.progressbar1, 506, 316)
        t = Thread(
            target=BrowserManagerManager,
            args=("falkon", "uninstall", self)
        )
        t.start()
    
    def on_uninstweb(self, widget):                                  
        self.begin_process()
        fixed.put(self.progressbar1, 671, 316)
        t = Thread(
            target=BrowserManagerManager,
            args=("web", "uninstall", self)
        )
        t.start()

    def on_aboutvivaldi(self, widget):
            dialog = Gtk.MessageDialog(self, 0, Gtk.MessageType.INFO, Gtk.ButtonsType.OK, "Vivaldi is an web browser, being developed by Vivaldi Technologies - a company founded by former Opera Software cofounder and CEO Jon Stephenson von Tetzchner. It is a browser that is simple by default but powerful when needed, with easily accessible features to greatly improve your browser workflow right out of the box. It also provides an optional advertisement and tracking blocker.\n\nBased on: Chromium\nMobile Version available: Yes\nExtra Repositories Added: Vivaldi's Official Package Repository")
            dialog.run()
            dialog.destroy()

    def on_aboutchrome(self, widget):
            dialog = Gtk.MessageDialog(self, 0, Gtk.MessageType.INFO, Gtk.ButtonsType.OK, "Google Chrome is an web browser project backed by Google that aims to build a safer, faster, and more stable way for all internet users to experience the web.\n\nBased on: Chromium\nMobile Version available: Yes\nExtra Repositories Added: Google Chrome's (Stable) Package Repository")
            dialog.run()
            dialog.destroy()

    def on_aboutchromium(self, widget):
            dialog = Gtk.MessageDialog(self, 0, Gtk.MessageType.INFO, Gtk.ButtonsType.OK, "Chromium is the open source father of Google Chrome, also being mainly made by Google. It shares a lot of the GUI that Google Chrome has, but with an alternative logo and some other features missing such as codecs being pre-installed, and so on.\n\nBased on: N/A\nMobile Version available: Yes\nExtra Repositories Added: Linux Mint (only required Chromium packages)")
            dialog.run()
            dialog.destroy()

    def on_aboutmsedge(self, widget):
            dialog = Gtk.MessageDialog(self, 0, Gtk.MessageType.INFO, Gtk.ButtonsType.OK, "Microsoft Edge is Microsoft's all-new release of the Microsoft Edge browser that was used in the latest version of their flagship Operating System. It shares a lot of similarities with the original Microsoft Edge. It also comes pre-bunded with the Bing search engine and a Start Page with Microsoft News integration.\n\nBased on: Chromium\nMobile Version available: Yes\nExtra Repositories Added: Microsoft Edge's Package Repository")
            dialog.run()
            dialog.destroy()

    def on_aboutfirefox(self, widget):
            dialog = Gtk.MessageDialog(self, 0, Gtk.MessageType.INFO, Gtk.ButtonsType.OK, "Firefox delivers safe and easy web browsing with a familiar user interface, thousands of plugins, and integrated search that lets you get the most out of the web.\n\nBased on: N/A\nMobile Version available: Yes\nExtra Repositories Added: Flathub (Flatpak)")
            dialog.run()
            dialog.destroy()

    def on_aboutbrave(self, widget):
            dialog = Gtk.MessageDialog(self, 0, Gtk.MessageType.INFO, Gtk.ButtonsType.OK, "Brave is yet another freeware browser based on the Chromium codebase, and Blink Engine. Brave is open-source, and is designed to block Ads and Website Trackers by default, with a Donate to Support Your Favourite Websites mindset.\n\nBased on: Chromium\nMobile Version available: Yes\nExtra Repositories Added: Brave Browser's Package Repository")
            dialog.run()
            dialog.destroy()

    def on_aboutopera(self, widget):
            dialog = Gtk.MessageDialog(self, 0, Gtk.MessageType.INFO, Gtk.ButtonsType.OK, "Opera is another freeware browser, being developed by Opera. The browser is built on the Blink Engine, and is designed to be feature rich, having built-in features such as an Ad Blocker, VPN, Battery Saver, and so on, all included with the browser.\n\nBased on: Chromium\nMobile Version available: Yes\nExtra Repositories Added: Opera Browser's Package Repository")
            dialog.run()
            dialog.destroy()

    def on_aboutwaterfox(self, widget):
            dialog = Gtk.MessageDialog(self, 0, Gtk.MessageType.INFO, Gtk.ButtonsType.OK, "Waterfox is a freeware browser based on Mozilla Firefox. This browser is built with a mix of privacy and customisability in mind. This browser has a big focus on stability and limiting data collection while staying true to the browser's base.\n\nBased on: Mozilla Firefox\nMobile Version available: No\nExtra Repositories Added: Unofficial Waterfox Package Repository")
            dialog.run()
            dialog.destroy()

    def on_aboutfalkon(self, widget):
            dialog = Gtk.MessageDialog(self, 0, Gtk.MessageType.INFO, Gtk.ButtonsType.OK, "Falkon is KDE's browser, which has a lot of Firefox's old design traits, a familiar look and feel, pre-built-in AdBlocker, and everything else you'd expect to see from a browser in the modern age. It's still a solid choice of browser, young as it may be.\n\nBased on: QtWebEngine\nMobile Version available: No\nExtra Repositories Added: None")
            dialog.run()
            dialog.destroy()

    def on_aboutweb(self, widget):
            dialog = Gtk.MessageDialog(self, 0, Gtk.MessageType.INFO, Gtk.ButtonsType.OK, "Web is the WebKit based web browser for GNOME. It offers a simple, clean, beautiful view of the Web. Its principles are simplicity and standards compliance.\n\nBased on: WebKitGTK\nMobile Version available: No*\nExtra Repositories Added: None\n\n* This web browser converts itself into a phone-friendly web browser on compatible phones")
            dialog.run()
            dialog.destroy()

    def on_aboutbm(self, widget):
            dialog = Gtk.MessageDialog(self, 0, Gtk.MessageType.INFO, Gtk.ButtonsType.OK, "Web Browser Manager is a utility for managing the web browsers that you have installed on your system. Choose from a variety of browsers with just a few clicks and find the browser that is right for you in no time.\n\nCopyright (GPLv3):\n- Feren OS Developer (2015-2020)\n- AZorin (2010-2015)\n- ZorinK (2010)\n\n\nWeb Browser Manager is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See Version 3 of the GNU General Public License for more details.")
            dialog.run()
            dialog.destroy()

    def on_close(self, widget):
        Gtk.main_quit()
        # self.close()

#app = QApplication(sys.argv)
ex = BrowserManager()
Gtk.main()
